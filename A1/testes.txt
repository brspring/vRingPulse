TESTE COM 4 PROCESSOS E COM O 2 FALHO LOGO NO INICIO: topologia 0, 1, 2 e 3 com o processo 2 falho desde o inicio da execucao.

TESTE 4 PROCESSOS COM O 2 FALHANDO DEPOIS DO INICIO: topologia 0,1,2 e 3 com o processo 2 falhando no instante 31.0

TESTE COM 2 PROCESSOS FALHOS CONSECUTIVOS: topologia 0, 1, 2, 3 e 4 com os processos 2 e 3 falhando em 31.0

TESTE COM 3 PROCESSOS FALHOS CONSECUTIVOS: topologia 0,1,2,3,4 e 5 com os processos 2, 3 e 4 falhos em 31.0 

TESTE COM SOMENTE UM PROCESSO CORRETO: topologia 0,1,2,3,4. apenas o 0 correto

CHECK_TIMEOUT antigo se precisar:

         case CHECK_TIMEOUT:
            if (status(processo[token].id) != 0) break; // Se estou falho, não checo

            double delta = time() - last_check_time[token];
            last_check_time[token] = time();
            int vizinhos[2] = {processo[token].left, processo[token].right};

            for (int i = 0; i < 2; i++) {
               int j = vizinhos[i];
               processo[token].Timer[j] += delta;

               printf("Processo %d checando o timer de %d: %d\n", token, j, processo[token].Timer[j]);

               if (processo[token].Timer[j] >= 2*T) {
                  processo[token].State[j] = 1; // Marca como suspeito
                  printf("Processo %d detecta que %d está SUSPEITO no tempo %.1f (timeout)\n", token, j, time());
               
               int salto = 1;
               int k = j;

               while (salto < N) {
                  // se o vizinho da esquerda for o falho, testa o vizinho da esquerda dele
                  if (j == processo[token].left)
                     k = (j - salto + N) % N;
                  else
                     k = (j + salto) % N;

                  if (k == token) break; // não envia para si mesmo

                  if (processo[token].State[k] == 1) {
                     salto++;
                     continue;
                  }

                  // simular envio de heartbeat para k e propagação do State[]
                  processo[k].Timer[token] = 0;
                  processo[k].State[token] = 0;

                  // propaga o vetor completo para avisar o vizinho sobre o que ele sabe
                  for (int s = 0; s < N; s++) {
                     int estado_local = processo[token].State[s];
                     if (estado_local == 0 || processo[k].State[s] == -1 || processo[k].State[s] < estado_local) {
                        processo[k].State[s] = estado_local;
                     }
                  }
                  // for (int s = 0; s < N; s++) {
                  //    int estado_local = processo[token].State[s];
                  //    if (processo[k].State[s] == -1 || processo[k].State[s] < estado_local) {
                  //       processo[k].State[s] = estado_local;
                  //    }
                  // }

                  break; // parou no primeiro correto
               }
                  if (processo[token].left == j) {
                        int old = processo[token].left;
                        processo[token].left = (processo[token].left - 1 + N) % N;
                        printf("Processo %d atualiza vizinho ESQUERDO: %d -> %d\n", token, old, processo[token].left);
                  }
                  if (processo[token].right == j) {
                        int old = processo[token].right;
                        processo[token].right = (processo[token].right + 1) % N;
                        printf("Processo %d atualiza vizinho DIREITO: %d -> %d\n", token, old, processo[token].right);
                  }
               }
            }

            printf("Processo %d checando timeouts no tempo %.1f\n", token, time());
            printf("\n=========== Estado dos Processos no tempo %.1f ===========\n", time());
            for (int j = 0; j < N; j++) {
               printf("P%d: ", j);
               for (int k = 0; k < N; k++) {
                  if (processo[j].State[k] == 0)
                     printf(" S%d:CORRETO /", k);
                  else if (processo[j].State[k] == 1)
                     printf(" S%d:SUSPEITO /", k);
                  else
                     printf(" S%d:UNKNOWN /", k);
               }
               printf("\n");
            }
            printf("===========================================================\n\n");
            schedule(CHECK_TIMEOUT, T, token);
            break;
            
        
           
